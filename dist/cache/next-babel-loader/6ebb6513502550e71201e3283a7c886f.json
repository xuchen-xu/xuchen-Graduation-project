{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"F:\\\\90\\u8425\\\\\\u8BFE\\u5802\\\\20210201\\\\code\\\\next-ts\\u6A21\\u677F\\\\my-app\\\\pages\\\\users\\\\[id].tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../../components/Layout\";\nimport ListDetail from \"../../components/ListDetail\";\n\nvar StaticPropsDetail = function StaticPropsDetail(_ref) {\n  var item = _ref.item,\n      errors = _ref.errors;\n\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: \"\".concat(item ? item.name : 'User Detail', \" | Next.js + TypeScript Example\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, item && __jsx(ListDetail, {\n    item: item,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }\n  }));\n};\n\n_c = StaticPropsDetail;\nexport var __N_SSG = true;\nexport default StaticPropsDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"StaticPropsDetail\");","map":{"version":3,"sources":["F:/90营/课堂/20210201/code/next-ts模板/my-app/pages/users/[id].tsx"],"names":["Layout","ListDetail","StaticPropsDetail","item","errors","color","name"],"mappings":";;;;;AAIA,OAAOA,MAAP;AACA,OAAOC,UAAP;;AAOA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAA6B;AAAA,MAA1BC,IAA0B,QAA1BA,IAA0B;AAAA,MAApBC,MAAoB,QAApBA,MAAoB;;AACrD,MAAIA,MAAJ,EAAY;AACV,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,sCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACgDD,MADhD,CADF,CADF;AAOD;;AAED,SACE,MAAC,MAAD;AACE,IAAA,KAAK,YACHD,IAAI,GAAGA,IAAI,CAACG,IAAR,GAAe,aADhB,oCADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGH,IAAI,IAAI,MAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALX,CADF;AASD,CApBD;;KAAMD,iB;;AAsBN,eAAeA,iBAAf","sourcesContent":["import { GetStaticProps, GetStaticPaths } from 'next'\n\nimport { User } from '../../interfaces'\nimport { sampleUserData } from '../../utils/sample-data'\nimport Layout from '../../components/Layout'\nimport ListDetail from '../../components/ListDetail'\n\ntype Props = {\n  item?: User\n  errors?: string\n}\n\nconst StaticPropsDetail = ({ item, errors }: Props) => {\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: 'red' }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout\n      title={`${\n        item ? item.name : 'User Detail'\n      } | Next.js + TypeScript Example`}\n    >\n      {item && <ListDetail item={item} />}\n    </Layout>\n  )\n}\n\nexport default StaticPropsDetail\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const paths = sampleUserData.map((user) => ({\n    params: { id: user.id.toString() },\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const id = params?.id\n    const item = sampleUserData.find((data) => data.id === Number(id))\n    // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n    return { props: { item } }\n  } catch (err) {\n    return { props: { errors: err.message } }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}