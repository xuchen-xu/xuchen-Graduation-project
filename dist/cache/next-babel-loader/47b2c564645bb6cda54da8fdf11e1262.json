{"ast":null,"code":"var _jsxFileName = \"F:\\\\90\\u8425\\\\\\u8BFE\\u5802\\\\20210201\\\\code\\\\next-ts\\u6A21\\u677F\\\\my-app\\\\pages\\\\users\\\\[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { sampleUserData } from \"../../utils/sample-data\";\nimport Layout from \"../../components/Layout\";\nimport ListDetail from \"../../components/ListDetail\";\n\nconst StaticPropsDetail = ({\n  item,\n  errors,\n  router\n}) => {\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors, router.query.id));\n  }\n\n  return __jsx(Layout, {\n    title: `${item ? item.name : 'User Detail'} | Next.js + TypeScript Example`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, item && __jsx(ListDetail, {\n    item: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }\n  }));\n};\n\nexport default StaticPropsDetail;\nexport const getStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const paths = sampleUserData.map(user => ({\n    params: {\n      id: user.id.toString()\n    }\n  })); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}; // This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const id = params === null || params === void 0 ? void 0 : params.id;\n    const item = sampleUserData.find(data => data.id === Number(id)); // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n\n    return {\n      props: {\n        item\n      }\n    };\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["F:/90营/课堂/20210201/code/next-ts模板/my-app/pages/users/[id].tsx"],"names":["sampleUserData","Layout","ListDetail","StaticPropsDetail","item","errors","router","color","query","id","name","getStaticPaths","paths","map","user","params","toString","fallback","getStaticProps","find","data","Number","props","err","message"],"mappings":";;;AAGA,SAASA,cAAT;AACA,OAAOC,MAAP;AACA,OAAOC,UAAP;;AAOA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAR;AAAeC,EAAAA;AAAf,CAAD,KAAoC;AAC5D,MAAID,MAAJ,EAAY;AACV,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,sCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACgDF,MADhD,EAEGC,MAAM,CAACE,KAAP,CAAaC,EAFhB,CADF,CADF;AAQD;;AAED,SACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAG,GAAEL,IAAI,GAAGA,IAAI,CAACM,IAAR,GAAe,aAC1B,iCAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGN,IAAI,IAAI,MAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJX,CADF;AAQD,CApBD;;AAsBA,eAAeD,iBAAf;AAEA,OAAO,MAAMQ,cAA8B,GAAG,YAAY;AACxD;AACA,QAAMC,KAAK,GAAGZ,cAAc,CAACa,GAAf,CAAoBC,IAAD,KAAW;AAC1CC,IAAAA,MAAM,EAAE;AAAEN,MAAAA,EAAE,EAAEK,IAAI,CAACL,EAAL,CAAQO,QAAR;AAAN;AADkC,GAAX,CAAnB,CAAd,CAFwD,CAMxD;AACA;;AACA,SAAO;AAAEJ,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,CATM,C,CAWP;AACA;AACA;;AACA,OAAO,MAAMC,cAA8B,GAAG,OAAO;AAAEH,EAAAA;AAAF,CAAP,KAAsB;AAClE,MAAI;AACF,UAAMN,EAAE,GAAGM,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEN,EAAnB;AACA,UAAML,IAAI,GAAGJ,cAAc,CAACmB,IAAf,CAAqBC,IAAD,IAAUA,IAAI,CAACX,EAAL,KAAYY,MAAM,CAACZ,EAAD,CAAhD,CAAb,CAFE,CAGF;AACA;;AACA,WAAO;AAAEa,MAAAA,KAAK,EAAE;AAAElB,QAAAA;AAAF;AAAT,KAAP;AACD,GAND,CAME,OAAOmB,GAAP,EAAY;AACZ,WAAO;AAAED,MAAAA,KAAK,EAAE;AAAEjB,QAAAA,MAAM,EAAEkB,GAAG,CAACC;AAAd;AAAT,KAAP;AACD;AACF,CAVM","sourcesContent":["import { GetStaticProps, GetStaticPaths } from 'next'\n\nimport { User } from '../../interfaces'\nimport { sampleUserData } from '../../utils/sample-data'\nimport Layout from '../../components/Layout'\nimport ListDetail from '../../components/ListDetail'\n\ntype Props = {\n  item?: User\n  errors?: string\n}\n\nconst StaticPropsDetail = ({ item, errors,router }: Props) => {\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: 'red' }}>Error:</span> {errors}\n          {router.query.id}\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout\n      title={`${item ? item.name : 'User Detail'\n        } | Next.js + TypeScript Example`}\n    >\n      {item && <ListDetail item={item} />}\n    </Layout>\n  )\n}\n\nexport default StaticPropsDetail\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const paths = sampleUserData.map((user) => ({\n    params: { id: user.id.toString() },\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const id = params?.id\n    const item = sampleUserData.find((data) => data.id === Number(id))\n    // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n    return { props: { item } }\n  } catch (err) {\n    return { props: { errors: err.message } }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}