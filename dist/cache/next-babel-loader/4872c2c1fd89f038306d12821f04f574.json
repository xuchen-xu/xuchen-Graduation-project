{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\u6BD5\\u4E1A\\u8BBE\\u8BA1\\\\\\u5B9E\\u8DF5\\u8D44\\u6599\\\\20210201-test\\\\20210201\\\\code\\\\next-ts\\u6A21\\u677F\\\\my-app\\\\pages\\\\shoptest2\\\\index.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react'; //---->引入react模块\n\nimport \"./sp.css\"; //引入sp.css样式\n\nclass Sp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //定义一个初始化状态 \n      good: [//将页面的数据写入good中用数组的方式保存\n      {\n        img: \"../../static/images/cat.jpg\",\n        txt: \"手工\",\n        jq: 12,\n        num: 1,\n        checked: false\n      }, //这里的图片都是本地图片，需要你本人自己替换，样式里也有一张需要替换 \n      {\n        img: \"../../static/images/cat.jpg\",\n        txt: \"桌\",\n        jq: 20,\n        num: 1,\n        checked: false\n      }, {\n        img: \"../../static/images/cat.jpg\",\n        txt: \"椅\",\n        jq: 32,\n        num: 1,\n        checked: false\n      }, {\n        img: \"../../static/images/cat.jpg\",\n        txt: \"板凳\",\n        jq: 40,\n        num: 1,\n        checked: false\n      }],\n      c: false //定义一个状态，后面用来判断 多选框 \n\n    };\n  }\n\n  zj() {\n    //--->总价\n    var list = this.state.good; //获取list中的数据  \n\n    var s = 0; //声明一个s变量用来保存总价 \n\n    list.forEach((v, i) => {\n      //循环它里面的数据\n      if (v.checked) {\n        //判断，当多选框被选中的时候 \n        s += v.jq * v.num; //总价等于当前被选中的数据的单价*数量 \n      }\n    });\n    return s;\n  }\n\n  jj(n) {\n    //+加按钮\n    var list = this.state.good;\n    list[n].num++; //n为当前的下标，点击后，每次数量加1\n\n    this.setState({\n      good: list\n    }); //在更新当前的状态 \n  }\n\n  jian(n) {\n    //-减按钮\n    var list = this.state.good;\n    list[n].num--; //n为当前的下标，点击后，每次减1 \n\n    if (list[n].num <= 0) {\n      //判断，当数量减到0的时候，弹出“最少买一个”，后面不在执行，最低的数量是1\n      alert(\"最少买一个\");\n      list[n].num = 1;\n    }\n\n    this.setState({\n      good: list\n    }); //在更新当前的状态 \n  }\n\n  tg(n) {\n    //--->点击切换按钮   多选框  目前做了三种方法可以实现 \n    var list = this.state.good;\n    list[n].checked = !list[n].checked; //取反值 \n    // ===================================第一种方法\n    // var ler=list.filter((v,i)=>{//数组过滤的方法 \n    //     return v.checked//--->返回 该多选框为被选中\n    // });\n    // if(ler.length==list.length){//--->判断选中的多选框的长度和数组中的数据长度是否相同\n    //     this.setState({good:list,c:true})//--->如果是，把全选的属性false更新为true\n    // }else{\n    //     this.setState({good:list,c:false})//--->如果不是，全选属性为false\n    // }\n    // ==============================================第二种方法\n    // var ler=list.every((v,i)=>{//--->every当多选框都被选中的时候，条件都满足true\n    //     return v.checked;//--->单个被选中返回false\n    // })\n    // // console.log(ler)\n    // this.setState({good:list,c:ler})//更新cc的状态为ler,当ler为false时，cc就是false,反之亦然 \n    // ====================================================第三种方法\n\n    var sun = 0; //声明一个sun ，用来保存数值\n\n    var ff = true; //声明一个状态 true  false 判断\n\n    list.forEach((v, i) => {\n      //循环加判断 \n      if (v.checked) {\n        //如果多选框被选中的时候，就让sun加1\n        sun++;\n      }\n    });\n\n    if (sun == list.length) {\n      //当sun被选中的数量等于它当前整体的长度的时候 \n      ff = true; //输出ff的状态为true\n    } else {\n      //反之 \n      ff = false;\n    }\n\n    this.setState({\n      good: list,\n      c: ff\n    }); //让cc的状态等于当前ff的状态\n  }\n\n  qx() {\n    //--->全选\n    var list = this.state.good;\n    var c = !this.state.c; //--->先改变当前的全选状态为true\n\n    list.forEach((v, i) => {\n      //--->循环当前的list数组\n      v.checked = c; //--->把全选的状态true赋值给good中的checked\n    });\n    this.setState({\n      good: list,\n      c\n    }); //更新状态 \n  }\n\n  js() {\n    //--->结算\n    var list = this.state.good;\n    var a = list.filter((v, i) => {\n      //数组过滤的方法 满足条件，输出新的数组，把不满足条件的过滤掉 \n      return v.checked; //当多选框被选中的时候 \n    });\n    console.log(a); //在控制台输出当前被选中的数据，价格，数量 等 \n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, __jsx(\"ul\", {\n      className: \"ultest\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, this.state.good.map((v, i) => {\n      //数组的map方法 修该数据后，返回一个行的新的数组 \n      return __jsx(\"li\", {\n        key: i,\n        className: \"litest\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 36\n        }\n      }, __jsx(\"img\", {\n        src: v.checked ? \"../../static/images/cat.jpg\" : \"../../static/images/cat.jpg\",\n        alt: \"\",\n        onClick: this.tg.bind(this, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 33\n        }\n      }), __jsx(\"img\", {\n        src: v.img,\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 33\n        }\n      }), __jsx(\"div\", {\n        className: \"box1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 33\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 37\n        }\n      }, v.txt), __jsx(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 37\n        }\n      }, \"$\", v.jq), __jsx(\"input\", {\n        type: \"button\",\n        value: \"+\",\n        onClick: this.jj.bind(this, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 37\n        }\n      }), __jsx(\"input\", {\n        type: \"text\",\n        value: v.num,\n        style: {\n          width: \"20px\"\n        },\n        readOnly: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 37\n        }\n      }), \" \", __jsx(\"input\", {\n        type: \"button\",\n        value: \"-\",\n        onClick: this.jian.bind(this, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 37\n        }\n      })));\n    })), __jsx(\"div\", {\n      className: \"box2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, __jsx(\"span\", {\n      className: (this.state.c ? \"active\" : \"\") + \" d1\",\n      onClick: this.qx.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 20\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 100\n      }\n    }, \"\\u5168\\u9009\")), __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, \"\\u5408\\u8BA1$\", this.zj()), __jsx(\"input\", {\n      type: \"button\",\n      value: \"\\u7ED3\\u7B97\",\n      onClick: this.js.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default Sp; //导出","map":{"version":3,"sources":["D:/react毕业设计/实践资料/20210201-test/20210201/code/next-ts模板/my-app/pages/shoptest2/index.jsx"],"names":["React","Component","Sp","constructor","props","state","good","img","txt","jq","num","checked","c","zj","list","s","forEach","v","i","jj","n","setState","jian","alert","tg","sun","ff","length","qx","js","a","filter","console","log","render","map","bind","width"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'; //---->引入react模块\r\nimport \"./sp.css\" //引入sp.css样式\r\n\r\nclass Sp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={//定义一个初始化状态 \r\n            good:[//将页面的数据写入good中用数组的方式保存\r\n                {img:\"../../static/images/cat.jpg\",txt:\"手工\",jq:12,num:1,checked:false},//这里的图片都是本地图片，需要你本人自己替换，样式里也有一张需要替换 \r\n                {img:\"../../static/images/cat.jpg\",txt:\"桌\",jq:20,num:1,checked:false},\r\n                {img:\"../../static/images/cat.jpg\",txt:\"椅\",jq:32,num:1,checked:false},\r\n                {img:\"../../static/images/cat.jpg\",txt:\"板凳\",jq:40,num:1,checked:false}\r\n            ],\r\n            c:false   //定义一个状态，后面用来判断 多选框 \r\n\r\n        }\r\n    }\r\n    zj(){//--->总价\r\n        var list=this.state.good;//获取list中的数据  \r\n        var s=0;//声明一个s变量用来保存总价 \r\n        list.forEach((v,i)=>{//循环它里面的数据\r\n            if(v.checked){//判断，当多选框被选中的时候 \r\n                s+=(v.jq*v.num);//总价等于当前被选中的数据的单价*数量 \r\n            }\r\n        });\r\n        return s\r\n    }\r\n\r\n    jj(n){//+加按钮\r\n        var list=this.state.good;\r\n        list[n].num++;//n为当前的下标，点击后，每次数量加1\r\n        this.setState({good:list})//在更新当前的状态 \r\n    }\r\n    jian(n){//-减按钮\r\n        var list=this.state.good;\r\n        list[n].num--;//n为当前的下标，点击后，每次减1 \r\n        if(list[n].num<=0){\r\n            //判断，当数量减到0的时候，弹出“最少买一个”，后面不在执行，最低的数量是1\r\n            alert(\"最少买一个\");\r\n            list[n].num=1;\r\n        }\r\n        this.setState({good:list})//在更新当前的状态 \r\n    }\r\n    tg(n){//--->点击切换按钮   多选框  目前做了三种方法可以实现 \r\n        var list=this.state.good;\r\n        list[n].checked=!list[n].checked;//取反值 \r\n        // ===================================第一种方法\r\n        // var ler=list.filter((v,i)=>{//数组过滤的方法 \r\n        //     return v.checked//--->返回 该多选框为被选中\r\n        // });\r\n        // if(ler.length==list.length){//--->判断选中的多选框的长度和数组中的数据长度是否相同\r\n        //     this.setState({good:list,c:true})//--->如果是，把全选的属性false更新为true\r\n        // }else{\r\n        //     this.setState({good:list,c:false})//--->如果不是，全选属性为false\r\n        // }\r\n        // ==============================================第二种方法\r\n        // var ler=list.every((v,i)=>{//--->every当多选框都被选中的时候，条件都满足true\r\n        //     return v.checked;//--->单个被选中返回false\r\n        // })\r\n        // // console.log(ler)\r\n        // this.setState({good:list,c:ler})//更新cc的状态为ler,当ler为false时，cc就是false,反之亦然 \r\n        // ====================================================第三种方法\r\n        var sun=0;//声明一个sun ，用来保存数值\r\n        var ff=true;//声明一个状态 true  false 判断\r\n        list.forEach((v,i)=>{//循环加判断 \r\n            if(v.checked){//如果多选框被选中的时候，就让sun加1\r\n                sun++\r\n            }\r\n        })\r\n        if(sun==list.length){//当sun被选中的数量等于它当前整体的长度的时候 \r\n            ff=true;//输出ff的状态为true\r\n        }else{//反之 \r\n            ff=false\r\n        }\r\n        this.setState({good:list,c:ff})//让cc的状态等于当前ff的状态\r\n    }\r\n\r\n    qx(){//--->全选\r\n        var list=this.state.good;\r\n        var c=!this.state.c;//--->先改变当前的全选状态为true\r\n        list.forEach((v,i)=>{//--->循环当前的list数组\r\n            v.checked=c;//--->把全选的状态true赋值给good中的checked\r\n        });\r\n\r\n        this.setState({good:list,c})//更新状态 \r\n    }\r\n    js(){//--->结算\r\n        var list=this.state.good;\r\n        var a=list.filter((v,i)=>{//数组过滤的方法 满足条件，输出新的数组，把不满足条件的过滤掉 \r\n           return v.checked//当多选框被选中的时候 \r\n\r\n        })\r\n        console.log(a)//在控制台输出当前被选中的数据，价格，数量 等 \r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"box\">\r\n                <ul className=\"ultest\">\r\n                    {\r\n                        this.state.good.map((v,i)=>{//数组的map方法 修该数据后，返回一个行的新的数组 \r\n                            return <li key={i} className=\"litest\">\r\n                                {/*<span className={(v.checked?\"active\":\"\")+\" d1\"} onClick={this.tg.bind(this,i)}></span>*/}\r\n                                <img src={v.checked?\"../../static/images/cat.jpg\":\"../../static/images/cat.jpg\"} alt=\"\" onClick={this.tg.bind(this,i)}/>\r\n                                <img src={v.img} alt=\"\"/>\r\n                                <div className=\"box1\">\r\n                                    <p>{v.txt}</p>\r\n                                    <i>${v.jq}</i>\r\n                                    <input type=\"button\" value=\"+\" onClick={this.jj.bind(this,i)}/>\r\n                                    <input type=\"text\" value={v.num} style={{width:\"20px\"}} readOnly /> {/*注：style后要加双花括号{{}}*/}\r\n                                    <input type=\"button\" value=\"-\" onClick={this.jian.bind(this,i)}/>\r\n                                </div>\r\n                            </li>\r\n                        })\r\n                    }\r\n                </ul>\r\n                <div className=\"box2\">\r\n                   <span className={(this.state.c?\"active\":\"\")+\" d1\"} onClick={this.qx.bind(this)}><b>全选</b></span>\r\n                    <span>合计${this.zj()}</span>\r\n                    <input type=\"button\" value=\"结算\" onClick={this.js.bind(this)}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sp;//导出 "]},"metadata":{},"sourceType":"module"}